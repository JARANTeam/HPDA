//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5420
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.CompactFramework.Design.Data 2.0.50727.5420 版自动生成。
// 
namespace HPDA {
    using System;
    using System.Data;
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("RmDataSet")]
    public partial class RmDataSet : global::System.Data.DataSet {
        
        private RmProduceDataTable tableRmProduce;
        
        private RmPoDataTable tableRmPo;
        
        private RmStoreDetailDataTable tableRmStoreDetail;
        
        private RmProduceDetailDataTable tableRmProduceDetail;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RmDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RmProduceDataTable RmProduce {
            get {
                return this.tableRmProduce;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RmPoDataTable RmPo {
            get {
                return this.tableRmPo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RmStoreDetailDataTable RmStoreDetail {
            get {
                return this.tableRmStoreDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RmProduceDetailDataTable RmProduceDetail {
            get {
                return this.tableRmProduceDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            RmDataSet cln = ((RmDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["RmProduce"] != null)) {
                    base.Tables.Add(new RmProduceDataTable(ds.Tables["RmProduce"]));
                }
                if ((ds.Tables["RmPo"] != null)) {
                    base.Tables.Add(new RmPoDataTable(ds.Tables["RmPo"]));
                }
                if ((ds.Tables["RmStoreDetail"] != null)) {
                    base.Tables.Add(new RmStoreDetailDataTable(ds.Tables["RmStoreDetail"]));
                }
                if ((ds.Tables["RmProduceDetail"] != null)) {
                    base.Tables.Add(new RmProduceDetailDataTable(ds.Tables["RmProduceDetail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableRmProduce = ((RmProduceDataTable)(base.Tables["RmProduce"]));
            if ((initTable == true)) {
                if ((this.tableRmProduce != null)) {
                    this.tableRmProduce.InitVars();
                }
            }
            this.tableRmPo = ((RmPoDataTable)(base.Tables["RmPo"]));
            if ((initTable == true)) {
                if ((this.tableRmPo != null)) {
                    this.tableRmPo.InitVars();
                }
            }
            this.tableRmStoreDetail = ((RmStoreDetailDataTable)(base.Tables["RmStoreDetail"]));
            if ((initTable == true)) {
                if ((this.tableRmStoreDetail != null)) {
                    this.tableRmStoreDetail.InitVars();
                }
            }
            this.tableRmProduceDetail = ((RmProduceDetailDataTable)(base.Tables["RmProduceDetail"]));
            if ((initTable == true)) {
                if ((this.tableRmProduceDetail != null)) {
                    this.tableRmProduceDetail.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "RmDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/RmDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableRmProduce = new RmProduceDataTable();
            base.Tables.Add(this.tableRmProduce);
            this.tableRmPo = new RmPoDataTable();
            base.Tables.Add(this.tableRmPo);
            this.tableRmStoreDetail = new RmStoreDetailDataTable();
            base.Tables.Add(this.tableRmStoreDetail);
            this.tableRmProduceDetail = new RmProduceDetailDataTable();
            base.Tables.Add(this.tableRmProduceDetail);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRmProduce() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRmPo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRmStoreDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRmProduceDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            RmDataSet ds = new RmDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void RmProduceRowChangeEventHandler(object sender, RmProduceRowChangeEvent e);
        
        public delegate void RmPoRowChangeEventHandler(object sender, RmPoRowChangeEvent e);
        
        public delegate void RmStoreDetailRowChangeEventHandler(object sender, RmStoreDetailRowChangeEvent e);
        
        public delegate void RmProduceDetailRowChangeEventHandler(object sender, RmProduceDetailRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RmProduceDataTable : global::System.Data.TypedTableBase<RmProduceRow> {
            
            private global::System.Data.DataColumn columnRowNo;
            
            private global::System.Data.DataColumn columncOrderNumber;
            
            private global::System.Data.DataColumn columncInvCode;
            
            private global::System.Data.DataColumn columncInvName;
            
            private global::System.Data.DataColumn columncUnit;
            
            private global::System.Data.DataColumn columniQuantity;
            
            private global::System.Data.DataColumn columniScanQuantity;
            
            private global::System.Data.DataColumn columncMemo;
            
            private global::System.Data.DataColumn columndLoadDate;
            
            private global::System.Data.DataColumn columnid;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmProduceDataTable() {
                this.TableName = "RmProduce";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RmProduceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RowNoColumn {
                get {
                    return this.columnRowNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cOrderNumberColumn {
                get {
                    return this.columncOrderNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cInvCodeColumn {
                get {
                    return this.columncInvCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cInvNameColumn {
                get {
                    return this.columncInvName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cUnitColumn {
                get {
                    return this.columncUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn iQuantityColumn {
                get {
                    return this.columniQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn iScanQuantityColumn {
                get {
                    return this.columniScanQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMemoColumn {
                get {
                    return this.columncMemo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dLoadDateColumn {
                get {
                    return this.columndLoadDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmProduceRow this[int index] {
                get {
                    return ((RmProduceRow)(this.Rows[index]));
                }
            }
            
            public event RmProduceRowChangeEventHandler RmProduceRowChanging;
            
            public event RmProduceRowChangeEventHandler RmProduceRowChanged;
            
            public event RmProduceRowChangeEventHandler RmProduceRowDeleting;
            
            public event RmProduceRowChangeEventHandler RmProduceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRmProduceRow(RmProduceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmProduceRow AddRmProduceRow(string cOrderNumber, string cInvCode, string cInvName, string cUnit, string iQuantity, string iScanQuantity, string cMemo, string dLoadDate, string id) {
                RmProduceRow rowRmProduceRow = ((RmProduceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        cOrderNumber,
                        cInvCode,
                        cInvName,
                        cUnit,
                        iQuantity,
                        iScanQuantity,
                        cMemo,
                        dLoadDate,
                        id};
                rowRmProduceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRmProduceRow);
                return rowRmProduceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RmProduceDataTable cln = ((RmProduceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RmProduceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRowNo = base.Columns["RowNo"];
                this.columncOrderNumber = base.Columns["cOrderNumber"];
                this.columncInvCode = base.Columns["cInvCode"];
                this.columncInvName = base.Columns["cInvName"];
                this.columncUnit = base.Columns["cUnit"];
                this.columniQuantity = base.Columns["iQuantity"];
                this.columniScanQuantity = base.Columns["iScanQuantity"];
                this.columncMemo = base.Columns["cMemo"];
                this.columndLoadDate = base.Columns["dLoadDate"];
                this.columnid = base.Columns["id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRowNo = new global::System.Data.DataColumn("RowNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowNo);
                this.columncOrderNumber = new global::System.Data.DataColumn("cOrderNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncOrderNumber);
                this.columncInvCode = new global::System.Data.DataColumn("cInvCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncInvCode);
                this.columncInvName = new global::System.Data.DataColumn("cInvName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncInvName);
                this.columncUnit = new global::System.Data.DataColumn("cUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncUnit);
                this.columniQuantity = new global::System.Data.DataColumn("iQuantity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columniQuantity);
                this.columniScanQuantity = new global::System.Data.DataColumn("iScanQuantity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columniScanQuantity);
                this.columncMemo = new global::System.Data.DataColumn("cMemo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMemo);
                this.columndLoadDate = new global::System.Data.DataColumn("dLoadDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndLoadDate);
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnRowNo.AutoIncrement = true;
                this.columnRowNo.AutoIncrementSeed = 1;
                this.columncMemo.Caption = "cCusAddress";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmProduceRow NewRmProduceRow() {
                return ((RmProduceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RmProduceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RmProduceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RmProduceRowChanged != null)) {
                    this.RmProduceRowChanged(this, new RmProduceRowChangeEvent(((RmProduceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RmProduceRowChanging != null)) {
                    this.RmProduceRowChanging(this, new RmProduceRowChangeEvent(((RmProduceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RmProduceRowDeleted != null)) {
                    this.RmProduceRowDeleted(this, new RmProduceRowChangeEvent(((RmProduceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RmProduceRowDeleting != null)) {
                    this.RmProduceRowDeleting(this, new RmProduceRowChangeEvent(((RmProduceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRmProduceRow(RmProduceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RmDataSet ds = new RmDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RmProduceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RmPoDataTable : global::System.Data.TypedTableBase<RmPoRow> {
            
            private global::System.Data.DataColumn columnRowNo;
            
            private global::System.Data.DataColumn columncOrderNumber;
            
            private global::System.Data.DataColumn columnFItemID;
            
            private global::System.Data.DataColumn columnFEntryID;
            
            private global::System.Data.DataColumn columncInvCode;
            
            private global::System.Data.DataColumn columncInvName;
            
            private global::System.Data.DataColumn columncUnit;
            
            private global::System.Data.DataColumn columniQuantity;
            
            private global::System.Data.DataColumn columniScanQuantity;
            
            private global::System.Data.DataColumn columncVendor;
            
            private global::System.Data.DataColumn columncMemo;
            
            private global::System.Data.DataColumn columndLoadDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmPoDataTable() {
                this.TableName = "RmPo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RmPoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RowNoColumn {
                get {
                    return this.columnRowNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cOrderNumberColumn {
                get {
                    return this.columncOrderNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FItemIDColumn {
                get {
                    return this.columnFItemID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FEntryIDColumn {
                get {
                    return this.columnFEntryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cInvCodeColumn {
                get {
                    return this.columncInvCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cInvNameColumn {
                get {
                    return this.columncInvName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cUnitColumn {
                get {
                    return this.columncUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn iQuantityColumn {
                get {
                    return this.columniQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn iScanQuantityColumn {
                get {
                    return this.columniScanQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cVendorColumn {
                get {
                    return this.columncVendor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cMemoColumn {
                get {
                    return this.columncMemo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dLoadDateColumn {
                get {
                    return this.columndLoadDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmPoRow this[int index] {
                get {
                    return ((RmPoRow)(this.Rows[index]));
                }
            }
            
            public event RmPoRowChangeEventHandler RmPoRowChanging;
            
            public event RmPoRowChangeEventHandler RmPoRowChanged;
            
            public event RmPoRowChangeEventHandler RmPoRowDeleting;
            
            public event RmPoRowChangeEventHandler RmPoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRmPoRow(RmPoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmPoRow AddRmPoRow(string cOrderNumber, string FItemID, string FEntryID, string cInvCode, string cInvName, string cUnit, string iQuantity, string iScanQuantity, string cVendor, string cMemo, string dLoadDate) {
                RmPoRow rowRmPoRow = ((RmPoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        cOrderNumber,
                        FItemID,
                        FEntryID,
                        cInvCode,
                        cInvName,
                        cUnit,
                        iQuantity,
                        iScanQuantity,
                        cVendor,
                        cMemo,
                        dLoadDate};
                rowRmPoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRmPoRow);
                return rowRmPoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RmPoDataTable cln = ((RmPoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RmPoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRowNo = base.Columns["RowNo"];
                this.columncOrderNumber = base.Columns["cOrderNumber"];
                this.columnFItemID = base.Columns["FItemID"];
                this.columnFEntryID = base.Columns["FEntryID"];
                this.columncInvCode = base.Columns["cInvCode"];
                this.columncInvName = base.Columns["cInvName"];
                this.columncUnit = base.Columns["cUnit"];
                this.columniQuantity = base.Columns["iQuantity"];
                this.columniScanQuantity = base.Columns["iScanQuantity"];
                this.columncVendor = base.Columns["cVendor"];
                this.columncMemo = base.Columns["cMemo"];
                this.columndLoadDate = base.Columns["dLoadDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRowNo = new global::System.Data.DataColumn("RowNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowNo);
                this.columncOrderNumber = new global::System.Data.DataColumn("cOrderNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncOrderNumber);
                this.columnFItemID = new global::System.Data.DataColumn("FItemID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFItemID);
                this.columnFEntryID = new global::System.Data.DataColumn("FEntryID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFEntryID);
                this.columncInvCode = new global::System.Data.DataColumn("cInvCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncInvCode);
                this.columncInvName = new global::System.Data.DataColumn("cInvName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncInvName);
                this.columncUnit = new global::System.Data.DataColumn("cUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncUnit);
                this.columniQuantity = new global::System.Data.DataColumn("iQuantity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columniQuantity);
                this.columniScanQuantity = new global::System.Data.DataColumn("iScanQuantity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columniScanQuantity);
                this.columncVendor = new global::System.Data.DataColumn("cVendor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncVendor);
                this.columncMemo = new global::System.Data.DataColumn("cMemo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncMemo);
                this.columndLoadDate = new global::System.Data.DataColumn("dLoadDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndLoadDate);
                this.columnRowNo.AutoIncrement = true;
                this.columnRowNo.AutoIncrementSeed = 1;
                this.columncVendor.Caption = "cCusName";
                this.columncMemo.Caption = "cCusAddress";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmPoRow NewRmPoRow() {
                return ((RmPoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RmPoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RmPoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RmPoRowChanged != null)) {
                    this.RmPoRowChanged(this, new RmPoRowChangeEvent(((RmPoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RmPoRowChanging != null)) {
                    this.RmPoRowChanging(this, new RmPoRowChangeEvent(((RmPoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RmPoRowDeleted != null)) {
                    this.RmPoRowDeleted(this, new RmPoRowChangeEvent(((RmPoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RmPoRowDeleting != null)) {
                    this.RmPoRowDeleting(this, new RmPoRowChangeEvent(((RmPoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRmPoRow(RmPoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RmDataSet ds = new RmDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RmPoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RmStoreDetailDataTable : global::System.Data.TypedTableBase<RmStoreDetailRow> {
            
            private global::System.Data.DataColumn columnRowNo;
            
            private global::System.Data.DataColumn columncSerialNumber;
            
            private global::System.Data.DataColumn columncLotNo;
            
            private global::System.Data.DataColumn columncOrderNumber;
            
            private global::System.Data.DataColumn columncInvCode;
            
            private global::System.Data.DataColumn columncInvName;
            
            private global::System.Data.DataColumn columncUnit;
            
            private global::System.Data.DataColumn columniQuantity;
            
            private global::System.Data.DataColumn columncUser;
            
            private global::System.Data.DataColumn columnFEntryID;
            
            private global::System.Data.DataColumn columnFitemID;
            
            private global::System.Data.DataColumn columnFSPNumber;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmStoreDetailDataTable() {
                this.TableName = "RmStoreDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RmStoreDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RowNoColumn {
                get {
                    return this.columnRowNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cSerialNumberColumn {
                get {
                    return this.columncSerialNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cLotNoColumn {
                get {
                    return this.columncLotNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cOrderNumberColumn {
                get {
                    return this.columncOrderNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cInvCodeColumn {
                get {
                    return this.columncInvCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cInvNameColumn {
                get {
                    return this.columncInvName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cUnitColumn {
                get {
                    return this.columncUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn iQuantityColumn {
                get {
                    return this.columniQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cUserColumn {
                get {
                    return this.columncUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FEntryIDColumn {
                get {
                    return this.columnFEntryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FitemIDColumn {
                get {
                    return this.columnFitemID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSPNumberColumn {
                get {
                    return this.columnFSPNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmStoreDetailRow this[int index] {
                get {
                    return ((RmStoreDetailRow)(this.Rows[index]));
                }
            }
            
            public event RmStoreDetailRowChangeEventHandler RmStoreDetailRowChanging;
            
            public event RmStoreDetailRowChangeEventHandler RmStoreDetailRowChanged;
            
            public event RmStoreDetailRowChangeEventHandler RmStoreDetailRowDeleting;
            
            public event RmStoreDetailRowChangeEventHandler RmStoreDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRmStoreDetailRow(RmStoreDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmStoreDetailRow AddRmStoreDetailRow(string cSerialNumber, string cLotNo, string cOrderNumber, string cInvCode, string cInvName, string cUnit, string iQuantity, string cUser, short FEntryID, short FitemID, string FSPNumber) {
                RmStoreDetailRow rowRmStoreDetailRow = ((RmStoreDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        cSerialNumber,
                        cLotNo,
                        cOrderNumber,
                        cInvCode,
                        cInvName,
                        cUnit,
                        iQuantity,
                        cUser,
                        FEntryID,
                        FitemID,
                        FSPNumber};
                rowRmStoreDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRmStoreDetailRow);
                return rowRmStoreDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RmStoreDetailDataTable cln = ((RmStoreDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RmStoreDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRowNo = base.Columns["RowNo"];
                this.columncSerialNumber = base.Columns["cSerialNumber"];
                this.columncLotNo = base.Columns["cLotNo"];
                this.columncOrderNumber = base.Columns["cOrderNumber"];
                this.columncInvCode = base.Columns["cInvCode"];
                this.columncInvName = base.Columns["cInvName"];
                this.columncUnit = base.Columns["cUnit"];
                this.columniQuantity = base.Columns["iQuantity"];
                this.columncUser = base.Columns["cUser"];
                this.columnFEntryID = base.Columns["FEntryID"];
                this.columnFitemID = base.Columns["FitemID"];
                this.columnFSPNumber = base.Columns["FSPNumber"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRowNo = new global::System.Data.DataColumn("RowNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowNo);
                this.columncSerialNumber = new global::System.Data.DataColumn("cSerialNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncSerialNumber);
                this.columncLotNo = new global::System.Data.DataColumn("cLotNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncLotNo);
                this.columncOrderNumber = new global::System.Data.DataColumn("cOrderNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncOrderNumber);
                this.columncInvCode = new global::System.Data.DataColumn("cInvCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncInvCode);
                this.columncInvName = new global::System.Data.DataColumn("cInvName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncInvName);
                this.columncUnit = new global::System.Data.DataColumn("cUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncUnit);
                this.columniQuantity = new global::System.Data.DataColumn("iQuantity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columniQuantity);
                this.columncUser = new global::System.Data.DataColumn("cUser", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncUser);
                this.columnFEntryID = new global::System.Data.DataColumn("FEntryID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFEntryID);
                this.columnFitemID = new global::System.Data.DataColumn("FitemID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFitemID);
                this.columnFSPNumber = new global::System.Data.DataColumn("FSPNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSPNumber);
                this.columnRowNo.AutoIncrement = true;
                this.columnRowNo.AutoIncrementSeed = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmStoreDetailRow NewRmStoreDetailRow() {
                return ((RmStoreDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RmStoreDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RmStoreDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RmStoreDetailRowChanged != null)) {
                    this.RmStoreDetailRowChanged(this, new RmStoreDetailRowChangeEvent(((RmStoreDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RmStoreDetailRowChanging != null)) {
                    this.RmStoreDetailRowChanging(this, new RmStoreDetailRowChangeEvent(((RmStoreDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RmStoreDetailRowDeleted != null)) {
                    this.RmStoreDetailRowDeleted(this, new RmStoreDetailRowChangeEvent(((RmStoreDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RmStoreDetailRowDeleting != null)) {
                    this.RmStoreDetailRowDeleting(this, new RmStoreDetailRowChangeEvent(((RmStoreDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRmStoreDetailRow(RmStoreDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RmDataSet ds = new RmDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RmStoreDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RmProduceDetailDataTable : global::System.Data.TypedTableBase<RmProduceDetailRow> {
            
            private global::System.Data.DataColumn columnRowNo;
            
            private global::System.Data.DataColumn columncSerialNumber;
            
            private global::System.Data.DataColumn columncLotNo;
            
            private global::System.Data.DataColumn columncOrderNumber;
            
            private global::System.Data.DataColumn columncInvCode;
            
            private global::System.Data.DataColumn columncInvName;
            
            private global::System.Data.DataColumn columncUnit;
            
            private global::System.Data.DataColumn columniQuantity;
            
            private global::System.Data.DataColumn columndScanTime;
            
            private global::System.Data.DataColumn columncUser;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmProduceDetailDataTable() {
                this.TableName = "RmProduceDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RmProduceDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RowNoColumn {
                get {
                    return this.columnRowNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cSerialNumberColumn {
                get {
                    return this.columncSerialNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cLotNoColumn {
                get {
                    return this.columncLotNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cOrderNumberColumn {
                get {
                    return this.columncOrderNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cInvCodeColumn {
                get {
                    return this.columncInvCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cInvNameColumn {
                get {
                    return this.columncInvName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cUnitColumn {
                get {
                    return this.columncUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn iQuantityColumn {
                get {
                    return this.columniQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dScanTimeColumn {
                get {
                    return this.columndScanTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cUserColumn {
                get {
                    return this.columncUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmProduceDetailRow this[int index] {
                get {
                    return ((RmProduceDetailRow)(this.Rows[index]));
                }
            }
            
            public event RmProduceDetailRowChangeEventHandler RmProduceDetailRowChanging;
            
            public event RmProduceDetailRowChangeEventHandler RmProduceDetailRowChanged;
            
            public event RmProduceDetailRowChangeEventHandler RmProduceDetailRowDeleting;
            
            public event RmProduceDetailRowChangeEventHandler RmProduceDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRmProduceDetailRow(RmProduceDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmProduceDetailRow AddRmProduceDetailRow(string cSerialNumber, string cLotNo, string cOrderNumber, string cInvCode, string cInvName, string cUnit, string iQuantity, string dScanTime, string cUser) {
                RmProduceDetailRow rowRmProduceDetailRow = ((RmProduceDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        cSerialNumber,
                        cLotNo,
                        cOrderNumber,
                        cInvCode,
                        cInvName,
                        cUnit,
                        iQuantity,
                        dScanTime,
                        cUser};
                rowRmProduceDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRmProduceDetailRow);
                return rowRmProduceDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RmProduceDetailDataTable cln = ((RmProduceDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RmProduceDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRowNo = base.Columns["RowNo"];
                this.columncSerialNumber = base.Columns["cSerialNumber"];
                this.columncLotNo = base.Columns["cLotNo"];
                this.columncOrderNumber = base.Columns["cOrderNumber"];
                this.columncInvCode = base.Columns["cInvCode"];
                this.columncInvName = base.Columns["cInvName"];
                this.columncUnit = base.Columns["cUnit"];
                this.columniQuantity = base.Columns["iQuantity"];
                this.columndScanTime = base.Columns["dScanTime"];
                this.columncUser = base.Columns["cUser"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRowNo = new global::System.Data.DataColumn("RowNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowNo);
                this.columncSerialNumber = new global::System.Data.DataColumn("cSerialNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncSerialNumber);
                this.columncLotNo = new global::System.Data.DataColumn("cLotNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncLotNo);
                this.columncOrderNumber = new global::System.Data.DataColumn("cOrderNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncOrderNumber);
                this.columncInvCode = new global::System.Data.DataColumn("cInvCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncInvCode);
                this.columncInvName = new global::System.Data.DataColumn("cInvName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncInvName);
                this.columncUnit = new global::System.Data.DataColumn("cUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncUnit);
                this.columniQuantity = new global::System.Data.DataColumn("iQuantity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columniQuantity);
                this.columndScanTime = new global::System.Data.DataColumn("dScanTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndScanTime);
                this.columncUser = new global::System.Data.DataColumn("cUser", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncUser);
                this.columnRowNo.AutoIncrement = true;
                this.columnRowNo.AutoIncrementSeed = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmProduceDetailRow NewRmProduceDetailRow() {
                return ((RmProduceDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RmProduceDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RmProduceDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RmProduceDetailRowChanged != null)) {
                    this.RmProduceDetailRowChanged(this, new RmProduceDetailRowChangeEvent(((RmProduceDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RmProduceDetailRowChanging != null)) {
                    this.RmProduceDetailRowChanging(this, new RmProduceDetailRowChangeEvent(((RmProduceDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RmProduceDetailRowDeleted != null)) {
                    this.RmProduceDetailRowDeleted(this, new RmProduceDetailRowChangeEvent(((RmProduceDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RmProduceDetailRowDeleting != null)) {
                    this.RmProduceDetailRowDeleting(this, new RmProduceDetailRowChangeEvent(((RmProduceDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRmProduceDetailRow(RmProduceDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RmDataSet ds = new RmDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RmProduceDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class RmProduceRow : global::System.Data.DataRow {
            
            private RmProduceDataTable tableRmProduce;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RmProduceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRmProduce = ((RmProduceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RowNo {
                get {
                    try {
                        return ((int)(this[this.tableRmProduce.RowNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmProduce”中列“RowNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmProduce.RowNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cOrderNumber {
                get {
                    try {
                        return ((string)(this[this.tableRmProduce.cOrderNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmProduce”中列“cOrderNumber”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmProduce.cOrderNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cInvCode {
                get {
                    try {
                        return ((string)(this[this.tableRmProduce.cInvCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmProduce”中列“cInvCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmProduce.cInvCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cInvName {
                get {
                    try {
                        return ((string)(this[this.tableRmProduce.cInvNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmProduce”中列“cInvName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmProduce.cInvNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cUnit {
                get {
                    try {
                        return ((string)(this[this.tableRmProduce.cUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmProduce”中列“cUnit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmProduce.cUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string iQuantity {
                get {
                    try {
                        return ((string)(this[this.tableRmProduce.iQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmProduce”中列“iQuantity”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmProduce.iQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string iScanQuantity {
                get {
                    try {
                        return ((string)(this[this.tableRmProduce.iScanQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmProduce”中列“iScanQuantity”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmProduce.iScanQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMemo {
                get {
                    try {
                        return ((string)(this[this.tableRmProduce.cMemoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmProduce”中列“cMemo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmProduce.cMemoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dLoadDate {
                get {
                    try {
                        return ((string)(this[this.tableRmProduce.dLoadDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmProduce”中列“dLoadDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmProduce.dLoadDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    try {
                        return ((string)(this[this.tableRmProduce.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmProduce”中列“id”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmProduce.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowNoNull() {
                return this.IsNull(this.tableRmProduce.RowNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowNoNull() {
                this[this.tableRmProduce.RowNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscOrderNumberNull() {
                return this.IsNull(this.tableRmProduce.cOrderNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcOrderNumberNull() {
                this[this.tableRmProduce.cOrderNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscInvCodeNull() {
                return this.IsNull(this.tableRmProduce.cInvCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcInvCodeNull() {
                this[this.tableRmProduce.cInvCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscInvNameNull() {
                return this.IsNull(this.tableRmProduce.cInvNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcInvNameNull() {
                this[this.tableRmProduce.cInvNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscUnitNull() {
                return this.IsNull(this.tableRmProduce.cUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcUnitNull() {
                this[this.tableRmProduce.cUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsiQuantityNull() {
                return this.IsNull(this.tableRmProduce.iQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetiQuantityNull() {
                this[this.tableRmProduce.iQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsiScanQuantityNull() {
                return this.IsNull(this.tableRmProduce.iScanQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetiScanQuantityNull() {
                this[this.tableRmProduce.iScanQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMemoNull() {
                return this.IsNull(this.tableRmProduce.cMemoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMemoNull() {
                this[this.tableRmProduce.cMemoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdLoadDateNull() {
                return this.IsNull(this.tableRmProduce.dLoadDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdLoadDateNull() {
                this[this.tableRmProduce.dLoadDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableRmProduce.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableRmProduce.idColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class RmPoRow : global::System.Data.DataRow {
            
            private RmPoDataTable tableRmPo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RmPoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRmPo = ((RmPoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RowNo {
                get {
                    try {
                        return ((int)(this[this.tableRmPo.RowNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmPo”中列“RowNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmPo.RowNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cOrderNumber {
                get {
                    try {
                        return ((string)(this[this.tableRmPo.cOrderNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmPo”中列“cOrderNumber”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmPo.cOrderNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FItemID {
                get {
                    try {
                        return ((string)(this[this.tableRmPo.FItemIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmPo”中列“FItemID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmPo.FItemIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FEntryID {
                get {
                    try {
                        return ((string)(this[this.tableRmPo.FEntryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmPo”中列“FEntryID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmPo.FEntryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cInvCode {
                get {
                    try {
                        return ((string)(this[this.tableRmPo.cInvCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmPo”中列“cInvCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmPo.cInvCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cInvName {
                get {
                    try {
                        return ((string)(this[this.tableRmPo.cInvNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmPo”中列“cInvName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmPo.cInvNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cUnit {
                get {
                    try {
                        return ((string)(this[this.tableRmPo.cUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmPo”中列“cUnit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmPo.cUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string iQuantity {
                get {
                    try {
                        return ((string)(this[this.tableRmPo.iQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmPo”中列“iQuantity”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmPo.iQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string iScanQuantity {
                get {
                    try {
                        return ((string)(this[this.tableRmPo.iScanQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmPo”中列“iScanQuantity”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmPo.iScanQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cVendor {
                get {
                    try {
                        return ((string)(this[this.tableRmPo.cVendorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmPo”中列“cVendor”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmPo.cVendorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cMemo {
                get {
                    try {
                        return ((string)(this[this.tableRmPo.cMemoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmPo”中列“cMemo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmPo.cMemoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dLoadDate {
                get {
                    try {
                        return ((string)(this[this.tableRmPo.dLoadDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmPo”中列“dLoadDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmPo.dLoadDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowNoNull() {
                return this.IsNull(this.tableRmPo.RowNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowNoNull() {
                this[this.tableRmPo.RowNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscOrderNumberNull() {
                return this.IsNull(this.tableRmPo.cOrderNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcOrderNumberNull() {
                this[this.tableRmPo.cOrderNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFItemIDNull() {
                return this.IsNull(this.tableRmPo.FItemIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFItemIDNull() {
                this[this.tableRmPo.FItemIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFEntryIDNull() {
                return this.IsNull(this.tableRmPo.FEntryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFEntryIDNull() {
                this[this.tableRmPo.FEntryIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscInvCodeNull() {
                return this.IsNull(this.tableRmPo.cInvCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcInvCodeNull() {
                this[this.tableRmPo.cInvCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscInvNameNull() {
                return this.IsNull(this.tableRmPo.cInvNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcInvNameNull() {
                this[this.tableRmPo.cInvNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscUnitNull() {
                return this.IsNull(this.tableRmPo.cUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcUnitNull() {
                this[this.tableRmPo.cUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsiQuantityNull() {
                return this.IsNull(this.tableRmPo.iQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetiQuantityNull() {
                this[this.tableRmPo.iQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsiScanQuantityNull() {
                return this.IsNull(this.tableRmPo.iScanQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetiScanQuantityNull() {
                this[this.tableRmPo.iScanQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscVendorNull() {
                return this.IsNull(this.tableRmPo.cVendorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcVendorNull() {
                this[this.tableRmPo.cVendorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscMemoNull() {
                return this.IsNull(this.tableRmPo.cMemoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcMemoNull() {
                this[this.tableRmPo.cMemoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdLoadDateNull() {
                return this.IsNull(this.tableRmPo.dLoadDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdLoadDateNull() {
                this[this.tableRmPo.dLoadDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class RmStoreDetailRow : global::System.Data.DataRow {
            
            private RmStoreDetailDataTable tableRmStoreDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RmStoreDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRmStoreDetail = ((RmStoreDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RowNo {
                get {
                    try {
                        return ((int)(this[this.tableRmStoreDetail.RowNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmStoreDetail”中列“RowNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmStoreDetail.RowNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cSerialNumber {
                get {
                    try {
                        return ((string)(this[this.tableRmStoreDetail.cSerialNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmStoreDetail”中列“cSerialNumber”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmStoreDetail.cSerialNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cLotNo {
                get {
                    try {
                        return ((string)(this[this.tableRmStoreDetail.cLotNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmStoreDetail”中列“cLotNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmStoreDetail.cLotNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cOrderNumber {
                get {
                    try {
                        return ((string)(this[this.tableRmStoreDetail.cOrderNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmStoreDetail”中列“cOrderNumber”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmStoreDetail.cOrderNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cInvCode {
                get {
                    try {
                        return ((string)(this[this.tableRmStoreDetail.cInvCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmStoreDetail”中列“cInvCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmStoreDetail.cInvCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cInvName {
                get {
                    try {
                        return ((string)(this[this.tableRmStoreDetail.cInvNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmStoreDetail”中列“cInvName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmStoreDetail.cInvNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cUnit {
                get {
                    try {
                        return ((string)(this[this.tableRmStoreDetail.cUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmStoreDetail”中列“cUnit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmStoreDetail.cUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string iQuantity {
                get {
                    try {
                        return ((string)(this[this.tableRmStoreDetail.iQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmStoreDetail”中列“iQuantity”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmStoreDetail.iQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cUser {
                get {
                    try {
                        return ((string)(this[this.tableRmStoreDetail.cUserColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmStoreDetail”中列“cUser”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmStoreDetail.cUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short FEntryID {
                get {
                    try {
                        return ((short)(this[this.tableRmStoreDetail.FEntryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmStoreDetail”中列“FEntryID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmStoreDetail.FEntryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short FitemID {
                get {
                    try {
                        return ((short)(this[this.tableRmStoreDetail.FitemIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmStoreDetail”中列“FitemID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmStoreDetail.FitemIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FSPNumber {
                get {
                    try {
                        return ((string)(this[this.tableRmStoreDetail.FSPNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmStoreDetail”中列“FSPNumber”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmStoreDetail.FSPNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowNoNull() {
                return this.IsNull(this.tableRmStoreDetail.RowNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowNoNull() {
                this[this.tableRmStoreDetail.RowNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscSerialNumberNull() {
                return this.IsNull(this.tableRmStoreDetail.cSerialNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcSerialNumberNull() {
                this[this.tableRmStoreDetail.cSerialNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscLotNoNull() {
                return this.IsNull(this.tableRmStoreDetail.cLotNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcLotNoNull() {
                this[this.tableRmStoreDetail.cLotNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscOrderNumberNull() {
                return this.IsNull(this.tableRmStoreDetail.cOrderNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcOrderNumberNull() {
                this[this.tableRmStoreDetail.cOrderNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscInvCodeNull() {
                return this.IsNull(this.tableRmStoreDetail.cInvCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcInvCodeNull() {
                this[this.tableRmStoreDetail.cInvCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscInvNameNull() {
                return this.IsNull(this.tableRmStoreDetail.cInvNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcInvNameNull() {
                this[this.tableRmStoreDetail.cInvNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscUnitNull() {
                return this.IsNull(this.tableRmStoreDetail.cUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcUnitNull() {
                this[this.tableRmStoreDetail.cUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsiQuantityNull() {
                return this.IsNull(this.tableRmStoreDetail.iQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetiQuantityNull() {
                this[this.tableRmStoreDetail.iQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscUserNull() {
                return this.IsNull(this.tableRmStoreDetail.cUserColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcUserNull() {
                this[this.tableRmStoreDetail.cUserColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFEntryIDNull() {
                return this.IsNull(this.tableRmStoreDetail.FEntryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFEntryIDNull() {
                this[this.tableRmStoreDetail.FEntryIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFitemIDNull() {
                return this.IsNull(this.tableRmStoreDetail.FitemIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFitemIDNull() {
                this[this.tableRmStoreDetail.FitemIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSPNumberNull() {
                return this.IsNull(this.tableRmStoreDetail.FSPNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSPNumberNull() {
                this[this.tableRmStoreDetail.FSPNumberColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class RmProduceDetailRow : global::System.Data.DataRow {
            
            private RmProduceDetailDataTable tableRmProduceDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RmProduceDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRmProduceDetail = ((RmProduceDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RowNo {
                get {
                    try {
                        return ((int)(this[this.tableRmProduceDetail.RowNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmProduceDetail”中列“RowNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmProduceDetail.RowNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cSerialNumber {
                get {
                    try {
                        return ((string)(this[this.tableRmProduceDetail.cSerialNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmProduceDetail”中列“cSerialNumber”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmProduceDetail.cSerialNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cLotNo {
                get {
                    try {
                        return ((string)(this[this.tableRmProduceDetail.cLotNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmProduceDetail”中列“cLotNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmProduceDetail.cLotNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cOrderNumber {
                get {
                    try {
                        return ((string)(this[this.tableRmProduceDetail.cOrderNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmProduceDetail”中列“cOrderNumber”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmProduceDetail.cOrderNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cInvCode {
                get {
                    try {
                        return ((string)(this[this.tableRmProduceDetail.cInvCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmProduceDetail”中列“cInvCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmProduceDetail.cInvCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cInvName {
                get {
                    try {
                        return ((string)(this[this.tableRmProduceDetail.cInvNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmProduceDetail”中列“cInvName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmProduceDetail.cInvNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cUnit {
                get {
                    try {
                        return ((string)(this[this.tableRmProduceDetail.cUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmProduceDetail”中列“cUnit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmProduceDetail.cUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string iQuantity {
                get {
                    try {
                        return ((string)(this[this.tableRmProduceDetail.iQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmProduceDetail”中列“iQuantity”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmProduceDetail.iQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dScanTime {
                get {
                    try {
                        return ((string)(this[this.tableRmProduceDetail.dScanTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmProduceDetail”中列“dScanTime”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmProduceDetail.dScanTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cUser {
                get {
                    try {
                        return ((string)(this[this.tableRmProduceDetail.cUserColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RmProduceDetail”中列“cUser”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRmProduceDetail.cUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowNoNull() {
                return this.IsNull(this.tableRmProduceDetail.RowNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowNoNull() {
                this[this.tableRmProduceDetail.RowNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscSerialNumberNull() {
                return this.IsNull(this.tableRmProduceDetail.cSerialNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcSerialNumberNull() {
                this[this.tableRmProduceDetail.cSerialNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscLotNoNull() {
                return this.IsNull(this.tableRmProduceDetail.cLotNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcLotNoNull() {
                this[this.tableRmProduceDetail.cLotNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscOrderNumberNull() {
                return this.IsNull(this.tableRmProduceDetail.cOrderNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcOrderNumberNull() {
                this[this.tableRmProduceDetail.cOrderNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscInvCodeNull() {
                return this.IsNull(this.tableRmProduceDetail.cInvCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcInvCodeNull() {
                this[this.tableRmProduceDetail.cInvCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscInvNameNull() {
                return this.IsNull(this.tableRmProduceDetail.cInvNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcInvNameNull() {
                this[this.tableRmProduceDetail.cInvNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscUnitNull() {
                return this.IsNull(this.tableRmProduceDetail.cUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcUnitNull() {
                this[this.tableRmProduceDetail.cUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsiQuantityNull() {
                return this.IsNull(this.tableRmProduceDetail.iQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetiQuantityNull() {
                this[this.tableRmProduceDetail.iQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdScanTimeNull() {
                return this.IsNull(this.tableRmProduceDetail.dScanTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdScanTimeNull() {
                this[this.tableRmProduceDetail.dScanTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscUserNull() {
                return this.IsNull(this.tableRmProduceDetail.cUserColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcUserNull() {
                this[this.tableRmProduceDetail.cUserColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class RmProduceRowChangeEvent : global::System.EventArgs {
            
            private RmProduceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmProduceRowChangeEvent(RmProduceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmProduceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class RmPoRowChangeEvent : global::System.EventArgs {
            
            private RmPoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmPoRowChangeEvent(RmPoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmPoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class RmStoreDetailRowChangeEvent : global::System.EventArgs {
            
            private RmStoreDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmStoreDetailRowChangeEvent(RmStoreDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmStoreDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class RmProduceDetailRowChangeEvent : global::System.EventArgs {
            
            private RmProduceDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmProduceDetailRowChangeEvent(RmProduceDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RmProduceDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace RmDataSetUtil {
    using System;
    using System.Data;
    
    
    public partial class DesignerUtil {
        
        public static bool IsDesignTime() {
            // Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("B77A5C561934E089")) {
                    return true;
                }
            }
            return false;
        }
        
        public static bool IsRunTime() {
            // Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("969DB8053D3322AC")) {
                    return true;
                }
            }
            return false;
        }
    }
}
